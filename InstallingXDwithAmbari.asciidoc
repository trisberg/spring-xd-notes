Installing Spring XD and Pivotal HD 3.0 on single-node VM using Ambari
======================================================================

Preparations
------------

First we need a VM to work with. I'm using VirtualBox but VMware would work as well.

=== Install VirtualBox 

link:https://www.virtualbox.org/[VirtualBox] is free open source virtualization software that allows you to easily create virtual machines. We will be using it to create a VM for our installation. Download the package for your operating system from link:https://www.virtualbox.org/wiki/Downloads[https://www.virtualbox.org/wiki/Downloads]. Follow the installation instruction that correspond to your operating system.

Once you have VirtualBox installed and up and running we can create our virtual machine.

=== Create a CentOS VM

You can download the Centos 6.5 64-bit ISO from one of the mirrors at link:http://mirror.centos.org/centos/6/isos/x86_64/[http://mirror.centos.org/centos/6/isos/x86_64/].

Create a new VM with 8GB of memory and 60GB of disk space if you have this available. You can try allocating only 4GB of memory if you are low on resources. Before starting the VM, attach the Live CD image you downloaded to the CD/DVD drive ov the new VM. You should also create two network adapters, "Adapter 1" set to "Host-only Adapter" and "Adapter 2" using "NAT" (If you haven't already created a "Host-only Network", you should do that first, under the VirtualBox Preferences Network tab). 

Now, start the VM and install a "Basic Server". Choose a hostname during the install. I picked 'hawaii' as the hostname for my server.

Once the install is complete and you reboot the server you can log in as root.

=== Configure networking

Log in as root. In a "Basic Server" install the nework adapters aren't enabled by default so we need to do this. Modify the `/etc/sysconfig/network-scripts/ifcfg-eth0` and `/etc/sysconfig/network-scripts/ifcfg-eth1` files. Change the boot setting to `ONBOOT=yes` for both files so the adapters are enabled when we boot. When this is done just enter the `reboot` command. Once you log back in you should see both adapters available when entering the `ifconfig` command. Make note of the IP address of the eth0 interface, we will need that to access the VM from the host machine and we will also use that network for our Ambari configuration.

[source]
----
# hostname
hawaii
# ifconfig
eth0      Link encap:Ethernet  HWaddr 08:00:27:29:AA:15  
          inet addr:192.168.59.103  Bcast:192.168.59.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe29:aa15/64 Scope:Link
...
----

We'll add eth0 IP address and `hostname` to `\etc\hosts`:

[source]
----
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

192.168.59.103	hawaii
----


=== Install basic packages we will need

Install OpenSSH and OpenSSL using:

[source]
----
# yum -y install openssh-server openssh-clients openssl
----

Now we should check that the `sshd` service is running and enabled on boot:

[source]
----
# service sshd status
# chkconfig --list sshd
----

If it is not then run these commands:

[source]
----
# chkconfig sshd on
# service sshd start
----

Now we can log out and SSH to the server from a host terminal.

[source]
----
$ ssh root@<ip-for-eth0>
----

I prefer to work from a host terminal's SSH session since I can cut-and-paste much easier.

=== Preparing for Ambari

==== Set up Password-less SSH 

In order to connect using SSH without a password we need to generate and store our SSH certificates in the `.ssh/autorized_keys` file on the local system. We can use `ssh-keygen` for this. Log in as root and run:

[source]
----
# ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa 
# cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys
# chmod 600 ~/.ssh/authorized_keys
----

We should now be able to create an SSH connection to `hostname` without being prompted for a password (if you get a prompt for adding the host to the known hosts file, just enter 'yes'):

[source]
----
[root@hawaii ~]# ssh `hostname`
The authenticity of host 'hawaii (192.168.59.103)' can't be established.
RSA key fingerprint is bd:d3:af:84:89:08:25:ce:ee:f1:02:f8:db:eb:06:5a.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'hawaii,192.168.59.103' (RSA) to the list of known hosts.
Last login: Thu May 28 13:20:13 2015 from hawaii
[root@hawaii ~]# exit
logout
Connection to hawaii closed.
----

==== Install ntpd

Ambari needs time to be synchronized so we need to install ntpd.

[source]
----
# yum -y install ntp ntpdate
# chkconfig ntpd on
# ntpdate pool.ntp.org
# service ntpd start
----


==== Disable iptables

A number of network ports need to be open on the VM for Ambari during setup. The easiest way to open the ports is to disable the iptables process:

[source]
----
# service iptables stop
# chkconfig iptables off
----

==== Disable SELinux and Check umask Value

To disable SELinux during the Ambari setup:

[source]
----
# setenforce 0
----

To permanently disable SELinux for the VM modify `/etc/sysconfig/selinux` and change the config to `SELINUX=disabled`.

Also, make sure umask is set to 0022 (it should be for a new install)

[source]
----
# umask
0022
----

==== Disable IPv6

Log in as root and cut-and-paste the following commands into your terminal window to disable IPv6:

[source]
----
mkdir -p /etc/sysctl.d
( cat > /etc/sysctl.d/99-hadoop-ipv6.conf <<-'EOF'
## Disabled ipv6
## Provided by Ambari Bootstrap
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF
    )
sysctl -e -p /etc/sysctl.d/99-hadoop-ipv6.conf
----

==== Disable Transparent Huge Pages (THP)

When installing Ambari, one or more host checks may fail if you have not disabled Transparent Huge Pages on all hosts. 

To disable THP log in as root and add the following commands to your `/etc/rc.local` file:

[source]
----
if test -f /sys/kernel/mm/redhat_transparent_hugepage/defrag;
  then echo never > /sys/kernel/mm/redhat_transparent_hugepage/defrag 
fi
if test -f /sys/kernel/mm/redhat_transparent_hugepage/enabled;
  then echo never > /sys/kernel/mm/redhat_transparent_hugepage/enabled 
fi
----


To confirm, reboot the host and then run the command:

[source]
----
# cat /sys/kernel/mm/transparent_hugepage/enabled
always madvise [never]
----

==== Install httpd

We need to have the web server running so log in as root and install it with the following commands:

[source]
----
yum -y install httpd
----

We'll set the ServerName to be `hawaii:80` in `/etc/httpd/conf/httpd.conf`

[source]
----
#
# ServerName gives the name and port that the server uses to identify itself.
# This can often be determined automatically, but we recommend you specify
# it explicitly to prevent problems during startup.
#
# If this is not set to valid DNS name for your host, server-generated
# redirections will not work.  See also the UseCanonicalName directive.
#
# If your host doesn't have a registered DNS name, enter its IP address here.
# You will have to access it by its address anyway, and this will make
# redirections work in a sensible way.
#
ServerName hawaii:80
----

Now we can start the httpd server.

[source]
----
chkconfig httpd on
service httpd start
----

=== Installing Ambari Server

We can follow steps 2.2 through 2.8 from the link:http://pivotalhd.docs.pivotal.io/docs/install-ambari.html#installing-ambari-server[Pivotal Ambari Installation Guide]

=== Create Hadoop Cluster

We can follow steps 3.2 through 3.6 from the link:http://pivotalhd.docs.pivotal.io/docs/install-ambari.html#install-cluster[Pivotal Ambari Installation Guide]

I installed the PHD-3.0.0.0	and PHD-UTILS-1.1.0 stacks.

My Repository settings are:

[width="80%",cols=">s,1m,2m",frame="topbot"]
|=====================================
|redhat6 |PHD-3.0             |http://hawaii/PHD-3.0.0.0
|        |PHD-UTILS-1.1.0.20  |http://hawaii/PHD-UTILS-1.1.0.20
|=====================================

I configured `hawaii` as the only host.

For the SSH Private key I used the one we generated on the VM. Just run this and cut-and-paste the key:

[source]
----
# cat .ssh/id_dsa
----

I ignored the warning about `hawaii` not beeing a FQDN.

For services to install I picked "HDFS", "YARN + MapReduce2", "Nagios", "Ganglia" and "ZooKeeper". Everything ends up on the single node.

You need to set password and alert email for Nagios.


=== Install Spring XD

IMPORTANT: This is still a work-in-progress and these packages have not yet been released.

==== Copying and installing Spring XD files

Copy the `SPRINGXD.tar` and `springxd-plugin-phd-1.0-1.noarch.rpm` files to the `/staging` directory on the VM.

Then unpack the `SPRINGXD.tar` file and create a symbolic link for YUM repository using:

[source]
----
# tar -xvf /staging/SPRINGXD.tar -C /staging/
# ln -s /staging/SPRINGXD /var/www/html/SPRINGXD
----

Install the Ambari plugin by installing the RPM package:

[source]
----
# rpm -ivh /staging/springxd-plugin-phd-1.0-1.noarch.rpm
----

We now need to restart the Ambari server to pick up this new plugin:

[source]
----
# ambari-server restart
----

==== Install Redis

We need to have a transport installed. Spring XD currently support Redis and Kafka for the Ambari installation. I'll use Redis since that seems simpler.

We need to add a Fedora YUM repo for Redis and then install it:

[source]
----
# wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
# sudo rpm -Uvh epel-release-6*.rpm
# sudo yum -y install redis
# chkconfig redis on
----

Modify `\etc\redis.conf`, comment out the `bind` setting:

[source]
----
# If you want you can bind a single interface, if the bind option is not
# specified all the interfaces will listen for incoming connections.
#
#bind 127.0.0.1
----

After this we can start Redis:

[source]
----
# sudo service redis start
----

We can now test Redis by using:

[source]
----
# redis-cli -h `hostname` ping
PONG
----

==== Install Spring XD using Ambari UI

Open the Ambari UI and log in as `admin`. From the Dashboard click on "Actions + Add Service" on the left hand side under the list of services. Check "Spring XD" and click `Next ->`. Both master, slave and client will be on the same host since we only have one. Just click `Next ->` a couple of times.

Under "Customize Services" we need to make a few changes:

For "Advanced springxd-site" enter the following:

[width="80%",cols="1m,2m",frame="topbot"]
|=====================================
|hsql.server.port            | 9101
|server.port                 | 9393
|spring.redis.host           | <your VM hostname>
|spring.redis.port           | 6379
|xd.messagebus.kafka.brokers | 
|xd.transport                | redis
|=====================================

Then click `Next ->`.

Review the configuration and then click `Deploy ->`.

==== Test the Spring XD installation

To start the XD Shell enter the following command:

[source]
----
xd-shell
----

Now, from the XD Shell run the following commands:

[source]
----
xd:>script --file /etc/springxd/conf/xd-shell.init
xd:>stream create tictoc --definition "time | hdfs" --deploy
----

To check that the stream works run the following commands:

[source]
----
xd:>hadoop fs ls /xd
Found 1 items
drwxrwxrwx   - spring-xd hdfs          0 2015-05-28 16:03 /xd/tictoc
----

Now, destroy the stream and display the output:

[source]
----
xd:>stream destroy tictoc
xd:>hadoop fs cat /xd/tictoc/*
2015-05-28 16:04:37
2015-05-28 16:04:38
2015-05-28 16:04:39
2015-05-28 16:04:40
2015-05-28 16:04:41
2015-05-28 16:04:42
2015-05-28 16:04:43
2015-05-28 16:04:44
2015-05-28 16:04:45
2015-05-28 16:04:46
2015-05-28 16:04:47
2015-05-28 16:04:48
2015-05-28 16:04:49
2015-05-28 16:04:50
2015-05-28 16:04:51
2015-05-28 16:04:52
2015-05-28 16:04:53
2015-05-28 16:04:54
----

NOTE: [green yellow-background big]*That's it -- have fun!*